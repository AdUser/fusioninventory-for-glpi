<?php

define('PHPUnit_MAIN_METHOD', 'Plugins_Fusioninventory_generalCheck::main');

if (!defined('GLPI_ROOT')) {
   define('GLPI_ROOT', '../../../..');

   include (GLPI_ROOT . "/config/based_config.php");

   require_once GLPI_ROOT."/inc/includes.php";
   $_SESSION['glpi_use_mode'] = 2;
   $_SESSION['glpiactiveprofile']['id'] = 4;
   $_SESSION["glpiID"] = 4;

   ini_set('display_errors','On');
   error_reporting(E_ALL | E_STRICT);
   set_error_handler("userErrorHandler");

   // Backup present DB
   include_once("inc/backup.php");
   backupMySQL();

   $_SESSION["glpilanguage"] = 'fr_FR';
   
   // Install
   include_once("inc/installation.php");
   installGLPI();
   installFusionPlugins();

   Session::loadLanguage();

   $CFG_GLPI["root_doc"] = GLPI_ROOT;

}
require_once 'emulatoragent.php';

/**
 * Test class for MyFile.
 * Generated by PHPUnit on 2010-08-06 at 12:05:09.
 */
class Plugins_Fusioninventory_generalCheck extends PHPUnit_Framework_TestCase {

    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        plugin_init_fusioninventory();
        plugin_init_fusinvinventory();
        plugin_init_fusinvsnmp();

        $suite  = new PHPUnit_Framework_TestSuite('Plugins_Fusioninventory_generalCheck');
        $result = PHPUnit_TextUI_TestRunner::run($suite);

    }

    // All tests for Unknwon devices
    public function testUnknownDevices() {
        plugin_init_fusioninventory();
        plugin_init_fusinvinventory();
        plugin_init_fusinvsnmp();

      $pfUnknownDevice = new PluginFusioninventoryUnknownDevice();
      $input = array();
      $input['name'] = '';
      $new_id = $pfUnknownDevice->add($input);
      if (!isset($new_id)) {
         $this->assertEquals(0, 1, 'Creation of unknown device not work (01)');
      }
      $pfUnknownDevice->getFromDB($new_id);
      $this->assertEquals($pfUnknownDevice->fields['name'],
               '', 'Unknwon device not added correctly (name field) (01)');
      // *** NAME + Accepted
      $input['accepted'] = 1;
      $new_id = $pfUnknownDevice->add($input);
      if (!isset($new_id)) {
         $this->assertEquals(0, 1, 'Creation of unknown device not work (02)');
      }
      $pfUnknownDevice->getFromDB($new_id);
      $this->assertEquals($pfUnknownDevice->fields['name'],
               '', 'Unknwon device not added correctly (name field) (02)');
      $this->assertEquals($pfUnknownDevice->fields['accepted'],
               1, 'Unknwon device not added correctly (accepted field) (02)');
      // *** NAME + Accepted + hub
      $input['hub'] = 1;
      $input['name'] = 'hub';
      $new_id = $pfUnknownDevice->add($input);
      if (!isset($new_id)) {
         $this->assertEquals(0, 1, 'Creation of unknown device not work (03)');
      }
      $pfUnknownDevice->getFromDB($new_id);
      $this->assertEquals($pfUnknownDevice->fields['name'],
               'hub', 'Unknwon device not added correctly (name field) (03)');
      $this->assertEquals($pfUnknownDevice->fields['accepted'],
               1, 'Unknwon device not added correctly (accepted field) (03)');

      // *** Add port on this unknwon device
      $NetworkPort = new NetworkPort();
      $input = array();
      $input['items_id'] = $new_id;
      $input['itemtype'] = "PluginFusioninventoryUnknownDevice";
      $port_id = $NetworkPort->add($input);
      $this->assertEquals(is_numeric($port_id), true, 'Creation of network port of
            unknown device (id '.$new_id.') fail');
      // Add SNMP Informations
      $pfUnknownDevice = new PluginFusinvsnmpUnknownDevice();
      $input = array();
      $input['plugin_fusioninventory_unknowndevices_id'] = $new_id;
      $input['sysdescr'] = 'Procurve';
      $snmp_id = $pfUnknownDevice->add($input);
      $pfUnknownDevice->getFromDB($snmp_id);
      $this->assertEquals($pfUnknownDevice->fields['plugin_fusioninventory_unknowndevices_id'],
               $new_id, 'Unknown device SNMP not added correctly (plugin_fusioninventory_unknowndevices_id field) (03)');
      $this->assertEquals($pfUnknownDevice->fields['sysdescr'],
               'Procurve', 'Unknown device SNMP not added correctly (sysdescr field) (03)');
      // Write XML
      $xml = "<xml>test</xml>";
      $pfUnknownDevice->writeXML($new_id, $xml);
      $folder = substr($new_id,0,-1);
      if (empty($folder)) {
         $folder = '0';
      }
      $this->assertTrue(file_exists(GLPI_ROOT."/files/_plugins/fusioninventory/xml/PluginFusioninventoryUnknownDevice/".$folder."/".$new_id),
              'XML of Unknown device not created successfully ('.GLPI_ROOT.'/files/_plugins/fusioninventory/xml/PluginFusioninventoryUnknownDevice/'.$folder.'/'.$new_id.')');
      // *** Delete Unknwon device
      $pfUnknownDevice->delete($pfUnknownDevice->fields);
      $pfUnknownDevice->getFromDB($new_id);
      $this->assertEquals($pfUnknownDevice->fields['is_deleted'],
               1, 'Unknown device not deleted correctly (03)');
      $this->assertTrue($NetworkPort->getFromDB($port_id), 'Network port of unknown device must be present');
      $this->assertTrue($pfUnknownDevice->getFromDB($snmp_id), 'SNMP informations of unknown device muste be present');
      // *** Purge unknown device
      $pfUnknownDevice->delete($pfUnknownDevice->fields, 1);
      $this->assertFalse($pfUnknownDevice->getFromDB($new_id),
               'Unknown device not purged correctly (03)');
      $this->assertFalse($pfUnknownDevice->getFromDB($snmp_id),
            'SNMP of unknown device purged not purged correctly (id '.$snmp_id.')');
      $this->assertFalse(file_exists(GLPI_ROOT."/files/_plugins/fusioninventory/xml/PluginFusioninventoryUnknownDevice/".$folder."/".$new_id),
              'XML of Unknown device not deleted successfully (03)');
      $this->assertFalse($NetworkPort->getFromDB($port_id),
                  'port of unknown device purged not purged correctly (id '.$port_id.')');

    }



    
}

// Call Plugins_Fusioninventory_Discovery_Newdevices::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Plugins_Fusioninventory_generalCheck::main') {
    Plugins_Fusioninventory_generalCheck::main();
}
?>