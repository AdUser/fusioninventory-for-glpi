<?php

define('PHPUnit_MAIN_METHOD', 'Plugins_Fusioninventory_InventorySNMP::main');
    
if (!defined('GLPI_ROOT')) {
   define('GLPI_ROOT', '../../../..');


   session_start();
   require_once GLPI_ROOT."/inc/includes.php";
   $_SESSION['glpi_use_mode'] = 2;

   ini_set('display_errors','On');
   error_reporting(E_ALL | E_STRICT);
   set_error_handler("userErrorHandler");

   // Backup present DB
   include_once("inc/backup.php");
   backupMySQL();

   // Install
   include_once("inc/installation.php");
   installGLPI();
   installFusionPlugins();
}

include_once('emulatoragent.php');

/**
 * Test class for MyFile.
 * Generated by PHPUnit on 2010-08-06 at 12:05:09.
 */
class Plugins_Fusioninventory_InventorySNMP extends PHPUnit_Framework_TestCase {

    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Plugins_Fusioninventory_InventorySNMP');
        $result = PHPUnit_TextUI_TestRunner::run($suite);

    }

   public function testSend() {

      // Create switch in asset
      $NetworkEquipment = new NetworkEquipment();
      $input = array();
      $input['serial']='FOC1567KYBT';
      $NetworkEquipment->add($input);

      // Create rule
      $rulecollection = new PluginFusinvsnmpRuleInventoryCollection();
      $input = array();;
      $input['is_active']=1;
      $input['name']='serial';
      $input['match']='AND';
      $input['sub_type'] = 'PluginFusinvsnmpRuleInventory';
      $rule_id = $rulecollection->add($input);

         // Add criteria
         $rule = $rulecollection->getRuleClass();
         $rulecriteria = new RuleCriteria(get_class($rule));
         $input = array();
         $input['rules_id'] = $rule_id;
         $input['criteria'] = "globalcriteria";
         $input['pattern']= 1;
         $rulecriteria->add($input);

         // Add action
         $ruleaction = new RuleAction(get_class($rule));
         $input = array();
         $input['rules_id'] = $rule_id;
         $input['action_type'] = 'assign';
         $input['field'] = '_import';
         $input['value'] = '1';
         $ruleaction->add($input);

      // Send inventory to GLPI
      $emulatorAgent = new emulatorAgent;
      $emulatorAgent->server_urlpath = "/glpi078/plugins/fusioninventory/front/communication.php";

      $input_xml = file_get_contents("xml/inventory_snmp/1.2/cisco2960.xml");

      $return = $emulatorAgent->sendProlog($input_xml);
      print_r($return);

      $a_switchs = $NetworkEquipment->find("");
      $this->assertEquals(count($a_switchs), 1 , 'Problem, have more than 1 switch in DB');

      $a_switchs = $NetworkEquipment->find("`serial`='FOC1567KYBT'");
      foreach($a_switchs as $id=>$data){

      }
      $this->assertEquals($data['name'], 'switch2960-001' , 'Problem on update name of switch');

   }


   public function testIPs() {
      $PluginFusinvsnmpNetworkEquipmentIP = new PluginFusinvsnmpNetworkEquipmentIP();
      $a_ips = $PluginFusinvsnmpNetworkEquipmentIP->find("`networkequipments_id`='1'
                                                AND `ip`='192.168.0.80'");
      $this->assertEquals(count($a_ips), 1 , 'Problem on manage IPs of the switch');
      
   }


}

// Call Plugins_Fusioninventory_Discovery_Newdevices::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Plugins_Fusioninventory_InventorySNMP::main') {
    Plugins_Fusioninventory_InventorySNMP::main();

}

//restoreMySQL();
//unlink('backup/backup.sql');
?>