<?php

define('PHPUnit_MAIN_METHOD', 'Plugins_Fusioninventory_InventorySNMP::main');
    
if (!defined('GLPI_ROOT')) {
   define('GLPI_ROOT', '../../../..');

   require_once GLPI_ROOT."/inc/includes.php";
   $_SESSION['glpi_use_mode'] = 2;
   $_SESSION['glpiactiveprofile']['id'] = 4;

   ini_set('display_errors','On');
   error_reporting(E_ALL | E_STRICT);
   set_error_handler("userErrorHandler");

   // Backup present DB
   include_once("inc/backup.php");
   backupMySQL();

   // Install
   include_once("inc/installation.php");
   installGLPI();
   installFusionPlugins();

   $_SESSION["glpilanguage"] = 'fr_FR';
   loadLanguage();
}

include_once('emulatoragent.php');

/**
 * Test class for MyFile.
 * Generated by PHPUnit on 2010-08-06 at 12:05:09.
 */
class Plugins_Fusioninventory_InventorySNMP extends PHPUnit_Framework_TestCase {

    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('Plugins_Fusioninventory_InventorySNMP');
        $result = PHPUnit_TextUI_TestRunner::run($suite);

    }

   public function testSend() {
      global $DB;

      // Create switch in asset
      $NetworkEquipment = new NetworkEquipment();
      $input = array();
      $input['serial']='FOC1567KYBT';
      $NetworkEquipment->add($input);

      // Create rule
      $rulecollection = new PluginFusinvsnmpRuleInventoryCollection();
      $input = array();;
      $input['is_active']=1;
      $input['name']='serial';
      $input['match']='AND';
      $input['sub_type'] = 'PluginFusinvsnmpRuleInventory';
      $rule_id = $rulecollection->add($input);

         // Add criteria
         $rule = $rulecollection->getRuleClass();
         $rulecriteria = new RuleCriteria(get_class($rule));
         $input = array();
         $input['rules_id'] = $rule_id;
         $input['criteria'] = "globalcriteria";
         $input['pattern']= 1;
         $rulecriteria->add($input);

         // Add action
         $ruleaction = new RuleAction(get_class($rule));
         $input = array();
         $input['rules_id'] = $rule_id;
         $input['action_type'] = 'assign';
         $input['field'] = '_import';
         $input['value'] = '1';
         $ruleaction->add($input);

     // set in config module inventory = yes by default
     $query = "UPDATE `glpi_plugin_fusioninventory_agentmodules`
        SET `is_active`='1'
        WHERE `modulename`='SNMPQUERY' ";
     $result = $DB->query($query);


     // Prolog
      $input_xml = '<?xml version="1.0" encoding="UTF-8"?>
<REQUEST>
  <DEVICEID>agenttest-2010-03-09-09-41-28</DEVICEID>
  <QUERY>PROLOG</QUERY>
  <TOKEN>NTMXKUBJ</TOKEN>
</REQUEST>';

      $emulatorAgent = new emulatorAgent;
      $emulatorAgent->server_urlpath = "/glpi078/plugins/fusioninventory/front/communication.php";
      // PROLOG. What can I do?
      $return_xml = $emulatorAgent->sendProlog($input_xml);
      echo "========== Prolog ==========\n";
      print_r($return_xml);


      // Send inventory to GLPI
      $emulatorAgent = new emulatorAgent;
      $emulatorAgent->server_urlpath = "/glpi078/plugins/fusioninventory/front/communication.php";

      $input_xml = file_get_contents("xml/inventory_snmp/1.2/cisco2960.xml");

      $return = $emulatorAgent->sendProlog($input_xml);
      print_r($return);

      $a_switchs = $NetworkEquipment->find("");
      $this->assertEquals(count($a_switchs), 1 , 'Problem, have more than 1 switch in DB');

      $a_switchs = $NetworkEquipment->find("`serial`='FOC1567KYBT'");
      foreach($a_switchs as $id=>$data){

      }
      $this->assertEquals($data['name'], 'switch2960-001' , 'Problem on update name of switch');
      $this->assertEquals($data['ip'], '192.168.0.80' , 'Problem on update ip of switch');
      $this->assertEquals($data['mac'], '00:1a:6c:9a:fc:80' , 'Problem on update mac of switch');
      $this->assertEquals($data['ram'], '60' , 'Problem on update ram of switch');
      $this->assertEquals(Dropdown::getDropdownName('glpi_networkequipmentmodels',
                           $data['networkequipmentmodels_id']), 'WS-C2960-24PC-L' , 'Problem on update model of switch');
      $this->assertEquals(Dropdown::getDropdownName('glpi_networkequipmentfirmwares',
                           $data['networkequipmentfirmwares_id']), '12.2(44)SE3' , 'Problem on update firmware of switch');
      $this->assertEquals(Dropdown::getDropdownName('glpi_locations',
                           $data['locations_id']), 'Baie_01' , 'Problem on update location of switch');

      $this->assertEquals($data['comment'], '' , 'Comment must be empty');


      $fusinvsnmp_networkequipments = new PluginFusinvsnmpCommonDBTM("glpi_plugin_fusinvsnmp_networkequipments");
      $a_snmpswitch = $fusinvsnmp_networkequipments->find("`networkequipments_id`='".$data['id']."' ");
      $this->assertEquals(count($a_snmpswitch), 1 , 'Extension of switch informations are missing');
      foreach($a_snmpswitch as $idsnmp=>$datasnmp){
         $this->assertEquals($datasnmp['sysdescr'], 'Cisco IOS Software, C2960 Software (C2960-LANBASEK9-M), Version 12.2(44)SE3, RELEASE SOFTWARE (fc2)
Copyright (c) 1986-2008 by Cisco Systems, Inc.
Compiled Mon 29-Sep-08 00:59 by nachen' , 'Problem on sysdescr not in DB');
         $this->assertEquals($datasnmp['memory'], '24' , 'Problem on update memory of switch');
         $this->assertEquals($datasnmp['uptime'], '86 days, 11:21:56.76' , 'Problem on update uptime of switch');
      }
   }


   public function testIPs() {
      $PluginFusinvsnmpNetworkEquipmentIP = new PluginFusinvsnmpNetworkEquipmentIP();
      $a_ips = $PluginFusinvsnmpNetworkEquipmentIP->find("`networkequipments_id`='1'
                                                AND `ip`='192.168.0.80'");
      $this->assertEquals(count($a_ips), 1 , 'Problem on manage IPs of the switch');
   }


   public function testPorts() {

      $NetworkPort = new NetworkPort();
      $a_ports = $NetworkPort->find("`itemtype`='NetworkEquipment' AND `items_id`='1'");

      $this->assertEquals(count($a_ports), 26 , 'Problem oN CREATION OF PORTS');
   }


   public function testPortsinfo() {

      $NetworkPort = new NetworkPort();
      $PluginFusinvsnmpNetworkPort = new PluginFusinvsnmpNetworkPort();

      $xml = simplexml_load_file("xml/inventory_snmp/1.2/cisco2960.xml",'SimpleXMLElement', LIBXML_NOCDATA);

      foreach ($xml->CONTENT->DEVICE->PORTS->children() as $name=>$child) {
         if ($child->IFTYPE[0] == '6') {
            $a_ports = $NetworkPort->find("`itemtype`='NetworkEquipment' AND `items_id`='1'
                                          AND `name`='".$child->IFNAME[0]."'");
            $data = array();
            foreach ($a_ports as $id => $data) {

            }
            $oFusioninventory_networkport = new PluginFusinvsnmpCommonDBTM("glpi_plugin_fusinvsnmp_networkports");
            $a_portsExt = $oFusioninventory_networkport->find("`networkports_id`='".$id."'");
            $dataExt = array();
            foreach ($a_portsExt as $idExt => $dataExt) {

            }
            
            $this->assertEquals($data['name'], strval($child->IFNAME[0]) , 'Name of port not good ("'.$data['name'].'" instead of "'.$child->IFNAME[0].'")');
            $this->assertEquals($data['mac'], strval($child->MAC[0]) , 'Mac of port not good ("'.$data['mac'].'" instead of "'.$child->MAC[0].'")');
            $this->assertEquals($data['logical_number'], strval($child->IFNUMBER[0]) , 'Number of port not good ("'.$data['logical_number'].'" instead of "'.$child->IFNUMBER[0].'")');

            $this->assertEquals($dataExt['ifdescr'], strval($child->IFDESCR[0]) , 'Description of port not good ("'.$data['ifdescr'].'" instead of "'.$child->IFDESCR[0].'")');
            $this->assertEquals($dataExt['ifmtu'], strval($child->IFMTU[0]) , 'MTU of port not good ("'.$data['ifmtu'].'" instead of "'.$child->IFMTU[0].'")');
            $this->assertEquals($dataExt['ifspeed'], strval($child->IFSPEED[0]) , 'Speed of port not good ("'.$data['ifspeed'].'" instead of "'.$child->IFSPEED[0].'")');
            $this->assertEquals($dataExt['ifinternalstatus'], strval($child->IFINTERNALSTATUS[0]) , 'Internal status of port not good ("'.$data['ifinternalstatus'].'" instead of "'.$child->IFINTERNALSTATUS[0].'")');
            $this->assertEquals($dataExt['iflastchange'], strval($child->IFLASTCHANGE[0]) , 'Last change of port not good ("'.$data['iflastchange'].'" instead of "'.$child->IFLASTCHANGE[0].'")');
            $this->assertEquals($dataExt['ifinoctets'], strval($child->IFINOCTETS[0]) , 'In octets of port not good ("'.$data['ifinoctets'].'" instead of "'.$child->IFINOCTETS[0].'")');
            $this->assertEquals($dataExt['ifinerrors'], strval($child->IFINERRORS[0]) , 'In errors of port not good ("'.$data['ifinerrors'].'" instead of "'.$child->IFINERRORS[0].'")');
            $this->assertEquals($dataExt['ifoutoctets'], strval($child->IFOUTOCTETS[0]) , 'Out octets of port not good ("'.$data['ifoutoctets'].'" instead of "'.$child->IFOUTOCTETS[0].'")');
            $this->assertEquals($dataExt['ifouterrors'], strval($child->IFOUTERRORS[0]) , 'out errors of port not good ("'.$data['ifouterrors'].'" instead of "'.$child->IFOUTERRORS[0].'")');
            $this->assertEquals($dataExt['ifstatus'], strval($child->IFSTATUS[0]) , 'Status of port not good ("'.$data['ifstatus'].'" instead of "'.$child->IFSTATUS[0].'")');
         }
      }

   }


   public function testPortsVlan() {
      
      $NetworkPort = new NetworkPort();
      $PluginFusinvsnmpNetworkPort = new PluginFusinvsnmpNetworkPort();

      $xml = simplexml_load_file("xml/inventory_snmp/1.2/cisco2960.xml",'SimpleXMLElement', LIBXML_NOCDATA);

      foreach ($xml->CONTENT->DEVICE->PORTS->children() as $name=>$child) {
         if ($child->IFTYPE[0] == '6') {

            $a_ports = $NetworkPort->find("`itemtype`='NetworkEquipment' AND `items_id`='1'
                                          AND `name`='".$child->IFNAME[0]."'");
            $data = array();
            foreach ($a_ports as $id => $data) {
            }
            
            $vlanDB = NetworkPort_Vlan::getVlansForNetworkPort($id);
            $vlanDB_Name_Comment = array();
            foreach ($vlanDB as $vlans_id=>$datas) {
               $temp = Dropdown::getDropdownName('glpi_vlans', $vlans_id, 1);
               $vlanDB_Name_Comment[$temp['name']."-".$temp['comment']] = 1;
            }
            $nb_errors = 0;
            $forgotvlan = '';
            if (isset($child->VLANS)) {
               foreach ($child->VLANS->children() as $namevlan => $childvlan) {
                  if (!isset($vlanDB_Name_Comment[strval($childvlan->NUMBER)."-".strval($childvlan->NAME)])) {
                     $nb_errors++;
                     $forgotvlan .= strval($childvlan->NUMBER)."-".strval($childvlan->NAME)." | ";
                  } else {
                     unset($vlanDB_Name_Comment[strval($childvlan->NUMBER)."-".strval($childvlan->NAME)]);
                  }
               }
            }
            $this->assertEquals($forgotvlan, '' , 'Vlans not in DB ("'.$forgotvlan.'")');
            $this->assertEquals(count($vlanDB_Name_Comment), 0 , 'Vlans in DB but not in the XML ("'.print_r($vlanDB_Name_Comment, true).'")');
         }
      }
   }

   public function testPortsConnections() {

      $NetworkPort = new NetworkPort();
      $PluginFusinvsnmpNetworkPort = new PluginFusinvsnmpNetworkPort();
      $NetworkPort_NetworkPort = new NetworkPort_NetworkPort();

      $xml = simplexml_load_file("xml/inventory_snmp/1.2/cisco2960.xml",'SimpleXMLElement', LIBXML_NOCDATA);

      foreach ($xml->CONTENT->DEVICE->PORTS->children() as $name=>$child) {
         if ($child->IFTYPE[0] == '6') {

            $a_ports = $NetworkPort->find("`itemtype`='NetworkEquipment' AND `items_id`='1'
                                          AND `name`='".$child->IFNAME[0]."'");
            $data = array();
            foreach ($a_ports as $id => $data) {
            }

            if (isset($child->CONNECTIONS)) {
               foreach ($child->CONNECTIONS->children() as $nameconnect => $childconnect) {
                  if (isset($child->CONNECTIONS->CDP)) { // Manage CDP
                     

                  } else { // Manage tradictionnal connections
                     // Search in DB if MAC exist

                     $a_port = $NetworkPort->find("`mac`='".strval($childconnect->MAC)."'
                                                   AND `itemtype`='PluginFusioninventoryUnknownDevice' ");
                     $this->assertEquals(count($a_port), 1 , 'Port (connection) not good create ('.count($a_port).' instead of 1 port ('.strval($childconnect->MAC).')');
                     if (count($child->CONNECTIONS->children()) > 1) {
                        // Hub management

                     } else {
                        foreach($a_port as $ports_id => $datas) {
                        }
                        $this->assertTrue($NetworkPort_NetworkPort->getFromDBForNetworkPort($ports_id) , 'Unknown port connection not connected with an other device');
                        
                     }
                  }
               }
            }
         }
      }
   }

}

// Call Plugins_Fusioninventory_Discovery_Newdevices::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'Plugins_Fusioninventory_InventorySNMP::main') {
    Plugins_Fusioninventory_InventorySNMP::main();

}

//restoreMySQL();
//unlink('backup/backup.sql');
?>